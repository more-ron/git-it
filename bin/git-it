#!/usr/bin/env ruby

require 'gli'
require 'git-it'

extend GitIt::GlobalHelper
include GLI::App

program_desc 'Git it! Get it?'

version GitIt::VERSION

# ==================
# = Global Options =
# ==================

desc 'Repository path'
default_value '{{present_working_directory}}'
arg_name 'path'
flag [:p,:path]

desc 'SHA1'
default_value '{{current_head}}'
arg_name 'sha'
flag [:s,:sha]

desc 'Test mode'
switch [:t,:test]
default_value false

# ============
# = Commands =
# ============

desc 'Opens current branch.'
command :opened do |c|
  c.action do |global_options, options, args|
    GitIt::Commander.new( global_options ).open( args, options )
  end
end

desc 'Compares current branch to...'
command :compared do |c|

  c.desc 'Name of the branch to compare to'
  c.default_value 'master'
  c.flag :to

  c.action do |global_options, options, args|
    GitIt::Commander.new( global_options ).compare( args, options )
  end
end

desc 'Issue pull request for current branch to...'
command :pulled do |c|

  c.desc 'Name of the branch to be pulled into'
  c.default_value 'master'
  c.flag :to

  c.action do |global_options, options, args|
    GitIt::Commander.new( global_options ).pull( args, options )
  end
end

# ===========================
# = Future verbs to support =
# ===========================

# git it dated
#   - displays dates of branches stating with the most dated to the newest

# git it branched
#   - creates and checkouts a branch based on a given phrase

# git it tagged
#   - tags current head given a phrase

# git it tested
#   - runs new tests added or modified in the current head since master (cucumber features)

# git it removed
#   - removes current branch from remote repository

# git it pruned
#   - trims branches not found remotely

# git it gemmed
#   - updates version, packages and pushes to http://rubygems.org/ (gems made out of gli)



# ====================
# = Before and After =
# ====================

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

class Object # :nodoc:
end

exit run(ARGV)